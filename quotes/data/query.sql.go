// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: query.sql

package data

import (
	"context"
)

const getAuthor = `-- name: GetAuthor :one
SELECT id, name FROM authors
WHERE id = $1
`

func (q *Queries) GetAuthor(ctx context.Context) (Author, error) {
	row := q.db.QueryRowContext(ctx, getAuthor)
	var i Author
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getQuote = `-- name: GetQuote :one
SELECT q.id, q.quote, a.name AS author
FROM quotes q
INNER JOIN authors a ON q.author_id = a.id
WHERE q.id = $1
`

type GetQuoteRow struct {
	ID     int32  `json:"id"`
	Quote  string `json:"quote"`
	Author string `json:"author"`
}

func (q *Queries) GetQuote(ctx context.Context) (GetQuoteRow, error) {
	row := q.db.QueryRowContext(ctx, getQuote)
	var i GetQuoteRow
	err := row.Scan(&i.ID, &i.Quote, &i.Author)
	return i, err
}

const getQuotesByAuthor = `-- name: GetQuotesByAuthor :many
SELECT q.id, q.quote, a.name AS author
FROM quotes q
INNER JOIN authors a ON q.author_id = a.id
WHERE a.id = $1
`

type GetQuotesByAuthorRow struct {
	ID     int32  `json:"id"`
	Quote  string `json:"quote"`
	Author string `json:"author"`
}

func (q *Queries) GetQuotesByAuthor(ctx context.Context) ([]GetQuotesByAuthorRow, error) {
	rows, err := q.db.QueryContext(ctx, getQuotesByAuthor)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetQuotesByAuthorRow
	for rows.Next() {
		var i GetQuotesByAuthorRow
		if err := rows.Scan(&i.ID, &i.Quote, &i.Author); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAuthors = `-- name: ListAuthors :many
SELECT id, name FROM authors
ORDER BY name
`

func (q *Queries) ListAuthors(ctx context.Context) ([]Author, error) {
	rows, err := q.db.QueryContext(ctx, listAuthors)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Author
	for rows.Next() {
		var i Author
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listQuotes = `-- name: ListQuotes :many
SELECT q.id, q.quote, a.name AS author
FROM quotes q
INNER JOIN authors a ON q.author_id = a.id
`

type ListQuotesRow struct {
	ID     int32  `json:"id"`
	Quote  string `json:"quote"`
	Author string `json:"author"`
}

func (q *Queries) ListQuotes(ctx context.Context) ([]ListQuotesRow, error) {
	rows, err := q.db.QueryContext(ctx, listQuotes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListQuotesRow
	for rows.Next() {
		var i ListQuotesRow
		if err := rows.Scan(&i.ID, &i.Quote, &i.Author); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
